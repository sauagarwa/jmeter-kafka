<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Kafka Performance Test Pan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="JMETER_THREADS" elementType="Argument">
            <stringProp name="Argument.name">JMETER_THREADS</stringProp>
            <stringProp name="Argument.value">${__P(jmeter.threads, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BOOTSTRAP_SERVERS" elementType="Argument">
            <stringProp name="Argument.name">BOOTSTRAP_SERVERS</stringProp>
            <stringProp name="Argument.value">${__P(bootstrap.servers, localhost:9092)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BATCH_SIZE" elementType="Argument">
            <stringProp name="Argument.name">BATCH_SIZE</stringProp>
            <stringProp name="Argument.value">${__P(batch.size, 16384)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LINGER_MS" elementType="Argument">
            <stringProp name="Argument.name">LINGER_MS</stringProp>
            <stringProp name="Argument.value">${__P(linger.ms, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BUFFER_MEMORY" elementType="Argument">
            <stringProp name="Argument.name">BUFFER_MEMORY</stringProp>
            <stringProp name="Argument.value">${__P(buffer.memory, 33554432)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ACKS" elementType="Argument">
            <stringProp name="Argument.name">ACKS</stringProp>
            <stringProp name="Argument.value">${__P(acks, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COMPRESSION_TYPE" elementType="Argument">
            <stringProp name="Argument.name">COMPRESSION_TYPE</stringProp>
            <stringProp name="Argument.value">${__P(compression.type, none)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SEND_BUFFER_BYTES" elementType="Argument">
            <stringProp name="Argument.name">SEND_BUFFER_BYTES</stringProp>
            <stringProp name="Argument.value">${__P(send_buffer.bytes, 131072)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RECEIVE_BUFFER_BYTES" elementType="Argument">
            <stringProp name="Argument.name">RECEIVE_BUFFER_BYTES</stringProp>
            <stringProp name="Argument.value">${__P(receive_buffer.bytes, 32768)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="KAFKA_TOPIC" elementType="Argument">
            <stringProp name="Argument.name">KAFKA_TOPIC</stringProp>
            <stringProp name="Argument.value">${__P(kafka.topic, jmeter-test)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PARTITION_NO" elementType="Argument">
            <stringProp name="Argument.name">PARTITION_NO</stringProp>
            <stringProp name="Argument.value">${__P(partition.no, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMPUP_PERIOD" elementType="Argument">
            <stringProp name="Argument.name">RAMPUP_PERIOD</stringProp>
            <stringProp name="Argument.value">${__P(ramup.period, 2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOP_COUNT" elementType="Argument">
            <stringProp name="Argument.name">LOOP_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(loop.count, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SAMPLER_LABEL" elementType="Argument">
            <stringProp name="Argument.name">SAMPLER_LABEL</stringProp>
            <stringProp name="Argument.value">${__P(sampler.label, Kafka JSR223)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="KAFKA_MESSAGE" elementType="Argument">
            <stringProp name="Argument.name">KAFKA_MESSAGE</stringProp>
            <stringProp name="Argument.value">${__P(kafka.message, )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADGROUP_SCHEDULER" elementType="Argument">
            <stringProp name="Argument.name">THREADGROUP_SCHEDULER</stringProp>
            <stringProp name="Argument.value">${__P(threadgroup.scheduler, false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADGROUP_DURATION" elementType="Argument">
            <stringProp name="Argument.name">THREADGROUP_DURATION</stringProp>
            <stringProp name="Argument.value">${__P(threadgroup.duration, 0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADGROUP_DELAY" elementType="Argument">
            <stringProp name="Argument.name">THREADGROUP_DELAY</stringProp>
            <stringProp name="Argument.value">${__P(threadgroup.delay, 0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADGROUP_DELAY_START" elementType="Argument">
            <stringProp name="Argument.name">THREADGROUP_DELAY_START</stringProp>
            <stringProp name="Argument.value">${__P(threadgroup.delaystart, false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADGROUP_SAME_USER_EACH_ITERATION" elementType="Argument">
            <stringProp name="Argument.name">THREADGROUP_SAME_USER_EACH_ITERATION</stringProp>
            <stringProp name="Argument.value">${__P(threadgroup.same_user_on_each_iteration, false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MAX_BLOCK_MS" elementType="Argument">
            <stringProp name="Argument.name">MAX_BLOCK_MS</stringProp>
            <stringProp name="Argument.value">${__P(max.block.ms, 60000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DELIVERY_TIMEOUT_MS" elementType="Argument">
            <stringProp name="Argument.name">DELIVERY_TIMEOUT_MS</stringProp>
            <stringProp name="Argument.value">${__P(delivery.timeout.ms, 120000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RECORD_SIZE" elementType="Argument">
            <stringProp name="Argument.name">RECORD_SIZE</stringProp>
            <stringProp name="Argument.value">${__P(record.size, 100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUMBER_RECORDS" elementType="Argument">
            <stringProp name="Argument.name">NUMBER_RECORDS</stringProp>
            <stringProp name="Argument.value">${__P(number.records, 100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THROTTLE_RECORDSIZE" elementType="Argument">
            <stringProp name="Argument.name">THROTTLE_RECORDSIZE</stringProp>
            <stringProp name="Argument.value">${__P(throttle.record.size, 0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THROTTLE_MESSAGENUM" elementType="Argument">
            <stringProp name="Argument.name">THROTTLE_MESSAGENUM</stringProp>
            <stringProp name="Argument.value">${__P(throttle.message.num, 0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${JMETER_THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP_PERIOD}</stringProp>
        <boolProp name="ThreadGroup.scheduler">${THREADGROUP_SCHEDULER}</boolProp>
        <stringProp name="ThreadGroup.duration">${THREADGROUP_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay">${THREADGROUP_DELAY}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">${THREADGROUP_SAME_USER_EACH_ITERATION}</boolProp>
        <boolProp name="ThreadGroup.delayedStart">${THREADGROUP_DELAY_START}</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${SAMPLER_LABEL}" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import blog.braindose.kafka.KafkaPerformance;

try{
	KafkaPerformance kperf = new KafkaPerformance(&quot;${KAFKA_TOPIC}&quot;, &quot;${KAFKA_MESSAGE}&quot;, ${RECORD_SIZE}, ${NUMBER_RECORDS}, &quot;${BOOTSTRAP_SERVERS}&quot;,
	            &quot;${COMPRESSION_TYPE}&quot;, ${BATCH_SIZE}, ${LINGER_MS}, &quot;${BUFFER_MEMORY}&quot;, &quot;${ACKS}&quot;, ${SEND_BUFFER_BYTES},
	            ${RECEIVE_BUFFER_BYTES}, ${MAX_BLOCK_MS}, ${DELIVERY_TIMEOUT_MS}, ${THROTTLE_RECORDSIZE}, ${THROTTLE_MESSAGENUM})
	
	            
	kperf.send();
}
catch(Exception e){
	e.printStackTrace();
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
